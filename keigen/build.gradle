apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'idea'

group = 'com.github.paramsen'

def VERSION_NAME = "1.0"
def VERSION_CODE = 1

version = VERSION_NAME

void generateFile(File src, File dst, Map<String, String> replaceKeyWithValue) {
    dst.delete()
    dst.createNewFile()

    def reader = new DataInputStream(new BufferedInputStream(new FileInputStream(src))).newReader()
    def builder = new StringBuilder()
    def next

    while ((next = reader.readLine()) != null) {
        builder.append(next).append("\n")
    }

    def base = builder.toString()

    replaceKeyWithValue.entrySet().forEach {
        base = base.replace(it.key, it.value)
    }

    def writer = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(dst))).newWriter()

    writer.write(base)
    writer.flush()

    println "Generated ${dst}"
}

def generatedOutDir = new File("keigen/build/generated/source/keigen/main/com/paramsen/keigen/")
generatedOutDir.mkdirs()
def generatedAndroidTestOutDir = new File("keigen/src/androidTest/java/com/paramsen/keigen/")
generatedAndroidTestOutDir.mkdirs()
def generatedNativeOutDir = new File("keigen/build/generated/source/keigen/main/native")
generatedNativeOutDir.mkdirs()

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.0'
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29
        versionCode VERSION_CODE
        versionName VERSION_NAME
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                arguments "-DANDROID_STL=c++_shared"
                cppFlags "-std=c++11"
            }
        }
    }

    sourceSets.main.java.srcDir "build/generated/source/keigen/main/com/paramsen/keigen/"

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        implementation 'androidx.annotation:annotation:1.1.0'

        androidTestImplementation 'junit:junit:4.12'
        androidTestImplementation 'androidx.test:runner:1.2.0'
        androidTestImplementation 'androidx.test:rules:1.2.0'
        androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
        androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    }

    sourceSets.main.java.srcDir new File("keigen/build/generated/source/keigen/main/")

    task generateByteType {
        def input = new File("keigen/src/main/java/com/paramsen/keigen/FloatMatrix.kt")
        def output = new File(generatedOutDir, "ByteMatrix.kt")
        generateFile(input, output, [ "Float": "Byte",  "toFloat": "toByte"])

        input = new File("keigen/src/main/java/com/paramsen/keigen/KeigenNativeBridgeFloat.kt")
        output = new File(generatedOutDir, "KeigenNativeBridgeByte.kt")
        generateFile(input, output, [ "Float": "Byte"])

        input = new File("keigen/src/androidTest/java/com/paramsen/keigen/FloatMatrixTest.kt")
        output = new File(generatedAndroidTestOutDir, "ByteMatrixTest.kt")
        generateFile(input, output, [ "Float": "Byte", "float": "byte"])

        input = new File("keigen/src/main/native/FloatMatrix.cpp")
        output = new File(generatedNativeOutDir, "ByteMatrix.cpp")
        generateFile(input, output, [ "Float": "Byte",
                                      "jfloat JAVA_TYPE": "jbyte JAVA_TYPE",
                                      "jfloatArray JAVA_TYPE_ARRAY": "jbyteArray JAVA_TYPE_ARRAY",
                                      "float CPP_TYPE": "int8_t CPP_TYPE" ])
    }

    task generateShortType {
        def input = new File("keigen/src/main/java/com/paramsen/keigen/FloatMatrix.kt")
        def output = new File(generatedOutDir, "ShortMatrix.kt")
        generateFile(input, output, [ "Float": "Short",  "toFloat": "toShort"])

        input = new File("keigen/src/main/java/com/paramsen/keigen/KeigenNativeBridgeFloat.kt")
        output = new File(generatedOutDir, "KeigenNativeBridgeShort.kt")
        generateFile(input, output, [ "Float": "Short"])

        input = new File("keigen/src/androidTest/java/com/paramsen/keigen/FloatMatrixTest.kt")
        output = new File(generatedAndroidTestOutDir, "ShortMatrixTest.kt")
        generateFile(input, output, [ "Float": "Short", "float": "short"])

        input = new File("keigen/src/main/native/FloatMatrix.cpp")
        output = new File(generatedNativeOutDir, "ShortMatrix.cpp")
        generateFile(input, output, [ "Float": "Short",
                                      "jfloat JAVA_TYPE": "jshort JAVA_TYPE",
                                      "jfloatArray JAVA_TYPE_ARRAY": "jshortArray JAVA_TYPE_ARRAY",
                                      "float CPP_TYPE": "int16_t CPP_TYPE" ])
    }

    task generateIntType {
        def input = new File("keigen/src/main/java/com/paramsen/keigen/FloatMatrix.kt")
        def output = new File(generatedOutDir, "IntMatrix.kt")
        generateFile(input, output, [ "Float": "Int",  "toFloat": "toInt"])

        input = new File("keigen/src/main/java/com/paramsen/keigen/KeigenNativeBridgeFloat.kt")
        output = new File(generatedOutDir, "KeigenNativeBridgeInt.kt")
        generateFile(input, output, [ "Float": "Int"])

        input = new File("keigen/src/androidTest/java/com/paramsen/keigen/FloatMatrixTest.kt")
        output = new File(generatedAndroidTestOutDir, "IntMatrixTest.kt")
        generateFile(input, output, [ "Float": "Int", "float": "int"])

        input = new File("keigen/src/main/native/FloatMatrix.cpp")
        output = new File(generatedNativeOutDir, "IntMatrix.cpp")
        generateFile(input, output, [ "Float": "Int",
                             "jfloat JAVA_TYPE": "jint JAVA_TYPE",
                             "jfloatArray JAVA_TYPE_ARRAY": "jintArray JAVA_TYPE_ARRAY",
                             "float CPP_TYPE": "int32_t CPP_TYPE" ])
    }

    task generateLongType {
        def input = new File("keigen/src/main/java/com/paramsen/keigen/FloatMatrix.kt")
        def output = new File(generatedOutDir, "LongMatrix.kt")
        generateFile(input, output, [ "Float": "Long",  "toFloat": "toLong"])

        input = new File("keigen/src/main/java/com/paramsen/keigen/KeigenNativeBridgeFloat.kt")
        output = new File(generatedOutDir, "KeigenNativeBridgeLong.kt")
        generateFile(input, output, [ "Float": "Long"])

        input = new File("keigen/src/androidTest/java/com/paramsen/keigen/FloatMatrixTest.kt")
        output = new File(generatedAndroidTestOutDir, "LongMatrixTest.kt")
        generateFile(input, output, [ "Float": "Long", "float": "long"])

        input = new File("keigen/src/main/native/FloatMatrix.cpp")
        output = new File(generatedNativeOutDir, "LongMatrix.cpp")
        generateFile(input, output, [ "Float": "Long",
                                      "jfloat JAVA_TYPE": "jlong JAVA_TYPE",
                                      "jfloatArray JAVA_TYPE_ARRAY": "jlongArray JAVA_TYPE_ARRAY",
                                      "float CPP_TYPE": "int64_t CPP_TYPE" ])
    }

    task generateDoubleType {
        def input = new File("keigen/src/main/java/com/paramsen/keigen/FloatMatrix.kt")
        def output = new File(generatedOutDir, "DoubleMatrix.kt")
        generateFile(input, output, [ "Float": "Double",  "toFloat": "toDouble"])

        input = new File("keigen/src/main/java/com/paramsen/keigen/KeigenNativeBridgeFloat.kt")
        output = new File(generatedOutDir, "KeigenNativeBridgeDouble.kt")
        generateFile(input, output, [ "Float": "Double"])

        input = new File("keigen/src/androidTest/java/com/paramsen/keigen/FloatMatrixTest.kt")
        output = new File(generatedAndroidTestOutDir, "DoubleMatrixTest.kt")
        generateFile(input, output, [ "Float": "Double",
                                      "float": "double",
                                    "expected, was": "expected, was, 0.000001"])

        input = new File("keigen/src/main/native/FloatMatrix.cpp")
        output = new File(generatedNativeOutDir, "DoubleMatrix.cpp")
        generateFile(input, output, [ "Float": "Double",
                             "jfloat JAVA_TYPE": "jdouble JAVA_TYPE",
                             "jfloatArray JAVA_TYPE_ARRAY": "jdoubleArray JAVA_TYPE_ARRAY",
                             "float CPP_TYPE": "double CPP_TYPE" ])
    }

    idea {
        module {
            generatedSourceDirs += files('build/generated/source/keigen/main/')
        }
    }

    /* verify that kissfft is initialized */
    task verifyEigenInitialized {
        if(!(new File("keigen/src/main/native/Eigen/Eigen").exists()))
            throw new Exception('Initialize git submodules before building (read "development" section in readme)')
    }

    /* jitpack.io conf */
    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    }
    task javadoc(type: Javadoc) {
        failOnError false
        source = android.sourceSets.main.java.sourceFiles
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += configurations.compile
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}