apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'idea'

group = 'com.github.paramsen'

def VERSION_NAME = "2.0.0"
def VERSION_CODE = 7

version = VERSION_NAME

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.0'
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29
        versionCode VERSION_CODE
        versionName VERSION_NAME
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                arguments "-DANDROID_STL=c++_shared"
                cppFlags "-std=c++11"
            }
        }
    }

    sourceSets.main.java.srcDir "build/generated/source/keigen/main/com/paramsen/keigen/"

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        implementation 'androidx.annotation:annotation:1.1.0'

        androidTestImplementation 'junit:junit:4.12'
        androidTestImplementation 'androidx.test:runner:1.2.0'
        androidTestImplementation 'androidx.test:rules:1.2.0'
        androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
        androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    }

    sourceSets.main.java.srcDir new File("keigen/build/generated/source/keigen/main/")

    task testGen {
        def input = new File("keigen/src/main/java/com/paramsen/keigen/FloatMatrix.kt")

        def outDir = new File("keigen/build/generated/source/keigen/main/com/paramsen/keigen/")
        outDir.mkdirs()

        def output = new File(outDir, "LongMatrix.kt")
        output.createNewFile()

        def reader = new DataInputStream(new BufferedInputStream(new FileInputStream(input))).newReader()
        def builder = new StringBuilder()
        def next

        while ((next = reader.readLine()) != null) {
            builder.append(next).append("\n")
        }

        def base = builder.toString()
        base = base.replace("Float", "Long")
        base = base.replace("toFloat", "toLong")

        def writer = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(output))).newWriter()

        writer.write(base)
        writer.flush()

        println "Generated"
    }

    task testGen1 {
        def input = new File("keigen/src/main/java/com/paramsen/keigen/KeigenNativeBridgeFloat.kt")

        def outDir = new File("keigen/build/generated/source/keigen/main/com/paramsen/keigen/")
        outDir.mkdirs()
        def output = new File(outDir, "KeigenNativeBridgeLong.kt")
        output.createNewFile()

        def reader = new DataInputStream(new BufferedInputStream(new FileInputStream(input))).newReader()
        def builder = new StringBuilder()
        def next

        while ((next = reader.readLine()) != null) {
            builder.append(next).append("\n")
        }

        def base = builder.toString()
        base = base.replace("KeigenNativeBridgeFloat", "KeigenNativeBridgeFloat")
        base = base.replace("Float", "Long")

        def writer = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(output))).newWriter()

        writer.write(base)
        writer.flush()

        println "Generated 1"
    }

    task testGen2 {
        def input = new File("keigen/src/main/native/FloatMatrix.cpp")
        def outDir = new File("keigen/build/generated/source/keigen/main/native")
        outDir.mkdirs()
        def output = new File(outDir, "LongMatrix.cpp")
        output.createNewFile()

        def reader = new DataInputStream(new BufferedInputStream(new FileInputStream(input))).newReader()
        def builder = new StringBuilder()
        def next

        while ((next = reader.readLine()) != null) {
            builder.append(next).append("\n")
        }

        def base = builder.toString()
        base = base.replace("Float", "Long")
        base = base.replace("float", "long")

        def writer = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(output))).newWriter()

        writer.write(base)
        writer.flush()

        println "Generated 2"
    }

    idea {
        module {
            generatedSourceDirs += files('build/generated/source/keigen/main/')
            sourceDirs += files('build/generated/source/keigen/main/')
        }
    }

    /* verify that kissfft is initialized */
    task verifyEigenInitialized {
        if(!(new File("keigen/src/main/native/Eigen/Eigen").exists()))
            throw new Exception('Initialize git submodules before building (read "development" section in readme)')
    }

    /* jitpack.io conf */
    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    }
    task javadoc(type: Javadoc) {
        failOnError false
        source = android.sourceSets.main.java.sourceFiles
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += configurations.compile
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}